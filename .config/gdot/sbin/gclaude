#!/bin/sh

# Claude Code tmux wrapper script
# Manages persistent tmux sessions for Claude Code based on working directory

# Function to get the current working directory (prefer git root)
get_session_dir() {
    if command -v git >/dev/null 2>&1; then
        git_root=$(git rev-parse --show-toplevel 2>/dev/null)
        if [ $? -eq 0 ] && [ -n "$git_root" ]; then
            printf '%s' "$git_root"
            return 0
        fi
    fi
    pwd
}

# Function to generate a session name from directory path
generate_session_name() {
    dir="$1"
    # Replace path separators and other problematic characters with underscores
    # Remove leading slash and convert to valid tmux session name
    session_name=$(printf '%s' "$dir" | sed 's|^/||' | sed 's|/|_|g' | sed 's|[^a-zA-Z0-9_-]|_|g')
    
    # Ensure session name is not empty
    if [ -z "$session_name" ]; then
        session_name="claude_root"
    else
        session_name="claude_${session_name}"
    fi
    
    printf '%s' "$session_name"
}

# Function to check if tmux session exists
session_exists() {
    tmux has-session -t "$1" 2>/dev/null
}

# Function to create new tmux session with Claude Code
create_claude_session() {
    session_name="$1"
    work_dir="$2"
    shift 2
    
    # Create new tmux session in detached mode, starting in the work directory
    tmux new-session -d -s "$session_name" -c "$work_dir"
    
    # Start Claude Code in the session with all arguments
    if [ $# -gt 0 ]; then
        tmux send-keys -t "$session_name" "claude $(printf '%s ' "$@")" C-m
    else
        tmux send-keys -t "$session_name" "claude" C-m
    fi
}

# Function to attach to existing session and send new command
attach_to_session() {
    session_name="$1"
    shift
    
    # If we have arguments, send them to the existing session
    if [ $# -gt 0 ]; then
        # Send Ctrl+C to interrupt any running command, then send new command
        tmux send-keys -t "$session_name" C-c
        tmux send-keys -t "$session_name" "claude $(printf '%s ' "$@")" C-m
    fi
    
    # Attach to the session
    tmux attach-session -t "$session_name"
}

# Main logic
main() {
    # Check if tmux is available
    if ! command -v tmux >/dev/null 2>&1; then
        echo "Error: tmux is not installed or not in PATH" >&2
        exit 1
    fi
    
    # Check if claude command is available
    if ! command -v claude >/dev/null 2>&1; then
        echo "Error: claude command is not installed or not in PATH" >&2
        exit 1
    fi
    
    # Get current working directory
    work_dir=$(get_session_dir)
    if [ -z "$work_dir" ]; then
        echo "Error: Unable to determine working directory" >&2
        exit 1
    fi
    
    # Generate session name
    session_name=$(generate_session_name "$work_dir")
    
    # Check if session exists
    if session_exists "$session_name"; then
        # Session exists, attach to it
        attach_to_session "$session_name" "$@"
    else
        # Session doesn't exist, create it
        create_claude_session "$session_name" "$work_dir" "$@"
        # Attach to the newly created session
        tmux attach-session -t "$session_name"
    fi
}

# Run main function with all arguments
main "$@"
